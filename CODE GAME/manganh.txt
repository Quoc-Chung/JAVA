
/*- Xử lí hình ảnh */
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;

import javax.imageio.ImageIO;


/* - Xử lí cửa sổ có kich thước dẹp - */
import java.awt.Dimension;

public class GamePanell extends JPanel {

	private BufferedImage[][] animation;
	/* - Tạo biến này đẻ lấy ra từng mảng xong gán cho ảnh */ 
	private BufferedImage img;
	
	private float xDelta =100, yDelta = 100;

	public GamePanell() {			
		/*- Bước đầu tiên là import ảnh lưu vào img -*/ 
		importImg();
		LoadImage();
	}
	
	private void importImg() {
		InputStream is= getClass().getResourceAsStream("/player_sprites.png");
		try {
			img = ImageIO.read(is);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
}
/* - Loat ảnh animation - */ 
	private void LoadImage() {
		/* -Ta thấy nó co 9 hàng - 6 cột - */ 
		animation = new BufferedImage[9][6];
		/* - Ta tưởng tượng mỗi i là hàng , j là cột 
		          animation[].langth : di qua kt từng hàng 
	    */
		
		for (int i=0;i<animation.length;i++) {
			for(int j=0;j<animation[i].length;j++) {
				animation[i][j]= img.getSubimage(j*64, i*40, 64, 40);
			}
		}
	}

+ BufferedImage[][] animation;  Đầu tiên là chúng ta sẽ tạo một cái 
mảng hai chiều để lưu trữ các cái hình ảnh animation.
+ animation là một cái mảng hai chiều được khai báo trước đó, là nơi 
lưu trữ tất cả các ảnh con từ ảnh lớn. 
+ img lưu trữ ảnh lớn mà bạn muốn chia thành các ảnh nhỏ. 

---------x---x----x-----x----x-----x-------x-------->
|
y
|
y
|      (xDelta, yDelta)
| 
y
|
|
y
|
|

0  1  2  3  4  5  

1 

2

3

4

5

6

7

8
+ for (int i=0;i<animation.length;i++) duyệt qua từng hàng của mảng 

+ for (int j =0 ; j< animation[i].length; j++) duyệt qua từng cột của mảng 
animation theo từng hàng . 

j * 64: Xác định vị trí bắt đầu của "subimage" trên trục x (chiều ngang)
dựa trên giá trị của j. Ở đây, mỗi "subimage" có chiều rộng là 64 pixel.

i * 40: Xác định vị trí bắt đầu của "subimage" trên trục y (chiều dọc) 
dựa trên giá trị của i . Mỗi hình ảnh nhỏ có chiều cao là 40 pixel. 
- Ta xét hàng  i = 0 , j = 0 ,1,2,3,4,5
               ......

(0,0)
(0,1)
(0,2)
(0,3)
(0,4)
(0,5)
(1,0)
(1,1)
(1,2)
(1,3)
(1,4)
(1,5)
(2,0)
(2,1)
(2,2)
(2,3)
(2,4)
(2,5)
(3,0)
(3,1)
(3,2)
(3,3)
(3,4)
(3,5)
(4,0)
(4,1)
(4,2)
(4,3)
(4,4)
(4,5)
(5,0)
(5,1)
(5,2)
(5,3)
(5,4)
(5,5)
(6,0)
(6,1)
(6,2)
(6,3)
(6,4)
(6,5)
(7,0)
(7,1)
(7,2)
(7,3)
(7,4)
(7,5)
(8,0)
(8,1)
(8,2)
(8,3)
(8,4)
(8,5)


- getSubimage(x, y, w, h) là phương thức của lớp BufferedImage trong thư viện 
JAVA AWT . Đây là cách các tham số của phương thức này được sử dụng.

- x : Tọa độ x của góc trái trên của ảnh con trong ảnh gốc. 

- y : Tọa độ y của góc trái trên của ảnh con trong ảnh gốc.

- w,h : chiều rộng , chiều cao của ảnh con.  

==> Như vậy thông qua vòng lặp hai chiều , một subimage mới có kích thước 
64 * 40 pixel được tạo và gán vào mảng animation . Các tham số  này được 
điều chỉnh để tạo ra mảng subimage có chiều cao và không chồng lên nhau. 

- Các tham số được điều chỉnh làm cho các ảnh không bị chồng lên nhau.

